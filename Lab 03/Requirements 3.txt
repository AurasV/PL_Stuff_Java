Activity
1) Using a while loop and without using arrays, write a program to compute and to display on the screen the first n terms from the Fibonacci sequence, where n is a natural number read from the keyboard. The Fibonacci sequence is defined by: (Lab3Ex1.java)

a0 = 0

a1= 1

an= an-1+ an-2 for n > 1

Observation: Do not use recursive calls !

2) Using a for loop, write a program to compute and to display on the screen the greatest common divisor of two natural numbers, a and b, which are read from the keyboard. (Lab3Ex2.java)

Observation: Do not use recursive calls !

3) Given an array with 10 integers, which is unsorted, write a program to find and to display on the screen the minimum and the maximum element of the array, without sorting the array. (Lab3Ex3.java)

Example:

int[] a = {4, 2, 1, 7, 0, 8, 3, 9, 6, 5};

Result

The minimum element is 0 and the maximum element is 9.

4) Given an array with 10 integers, which is already sorted in ascending order, apply the binary search algorithm. Search for an element in the array (the value of the element is read from the keyboard) and display on the screen the element and the index of the element. If the element is not found in the array, display an appropriate message. (Lab3Ex4.java)

Example

int[] a = {10, 17, 22, 31, 40, 48, 53, 59, 66, 75};

Result

The element 66 was found at the index 8

The element 70 was NOT found in the array

Observation: Do not use recursive calls !

5) Given two square matrices with 3 lines and 3 columns, write a program to compute and to display on the screen the sum and the product of the two square matrices.  (Lab3Ex5.java)

Homework
1) Write a class Lab3HwEx1Distance (Lab3HwEx1Distance.java) in which you implement a method 

public static double distance(double x1, double y1, double x2, double y2) {…} 

that computes the distance between two points with coordinates (x1,y1) and (x2,y2) using the Euclidian distance formula.

Test your method for points A(0,0) and B(4,5).

2) Write a class Lab3HwEx2MatrixOperations (Lab3HwEx2MatrixOperations.java) in which you implement the methods: 

public static double[][] matrixAdd(double m1[][], double m2[][]) {…}

that returns a matrix which is the sum of matrix m1 and matrix m2. m1 and m2 have the same dimensions.

public static double matrixDiagSum(double m1[][]) {…} 

that returns the sum of the elements on the first diagonal of matrix m1. Consider the matrix m1 to be square.